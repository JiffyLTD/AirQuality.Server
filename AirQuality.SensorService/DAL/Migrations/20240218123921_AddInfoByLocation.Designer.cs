// <auto-generated />
using System;
using AirQuality.SensorService.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AirQuality.SensorService.Migrations
{
    [DbContext(typeof(MasterDbContext))]
    [Migration("20240218123921_AddInfoByLocation")]
    partial class AddInfoByLocation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AirQuality.Core.DAL.Models.InfoByLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AvgCo")
                        .HasColumnType("integer")
                        .HasColumnName("avg_co");

                    b.Property<int>("AvgHumidity")
                        .HasColumnType("integer")
                        .HasColumnName("avg_humidity");

                    b.Property<int>("AvgPm_1")
                        .HasColumnType("integer")
                        .HasColumnName("avg_pm_1");

                    b.Property<int>("AvgPm_10")
                        .HasColumnType("integer")
                        .HasColumnName("avg_pm_10");

                    b.Property<int>("AvgPm_2_5")
                        .HasColumnType("integer")
                        .HasColumnName("avg_pm_2_5");

                    b.Property<int>("AvgPressure")
                        .HasColumnType("integer")
                        .HasColumnName("avg_pressure");

                    b.Property<float>("AvgTemperature")
                        .HasColumnType("real")
                        .HasColumnName("avg_temperature");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_name");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uuid")
                        .HasColumnName("station_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_infos_by_location");

                    b.ToTable("infos_by_location", (string)null);
                });

            modelBuilder.Entity("AirQuality.Core.DAL.Models.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uuid")
                        .HasColumnName("sensor_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_stations");

                    b.ToTable("stations", (string)null);
                });

            modelBuilder.Entity("AirQuality.Core.DAL.Models.StationData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Co")
                        .HasColumnType("integer")
                        .HasColumnName("co");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer")
                        .HasColumnName("humidity");

                    b.Property<int>("Pm_1")
                        .HasColumnType("integer")
                        .HasColumnName("pm_1");

                    b.Property<int>("Pm_10")
                        .HasColumnType("integer")
                        .HasColumnName("pm_10");

                    b.Property<int>("Pm_2_5")
                        .HasColumnType("integer")
                        .HasColumnName("pm_2_5");

                    b.Property<int>("Pressure")
                        .HasColumnType("integer")
                        .HasColumnName("pressure");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uuid")
                        .HasColumnName("station_id");

                    b.Property<float>("Temperature")
                        .HasColumnType("real")
                        .HasColumnName("temperature");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_stations_data");

                    b.ToTable("stations_data", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
